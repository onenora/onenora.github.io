[{"categories":["Telegram"],"content":"前提 宿主机已经安装 docker(未安装请使用官方脚本 curl -fsSL https://get.docker.com | bash -s docker ) 无需配置更多环境依赖,打开即用～ 仅支持 AMD ","date":"2022-11-01","objectID":"/pagermaid_pyro%E7%9A%84%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/:1:0","tags":["PagerMaid"],"title":"PagerMaid_Pyro的搭建教程","uri":"/pagermaid_pyro%E7%9A%84%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"},{"categories":["Telegram"],"content":"使用方法 docker run -itd --name pgmpyro --privileged=true --restart=always altriabot/pagermaid_pyro:2.0 ","date":"2022-11-01","objectID":"/pagermaid_pyro%E7%9A%84%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/:2:0","tags":["PagerMaid"],"title":"PagerMaid_Pyro的搭建教程","uri":"/pagermaid_pyro%E7%9A%84%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"},{"categories":["Telegram"],"content":"配置 PagerMaid-Pyro 说明：配置 PagerMaid-Pyro 过程中使用的命令，都是在宿主机上执行。不需要进入容器(Container)内的 shell。 在宿主机，使用 vim 编辑配置文件 config.yml 中的 2 个值 (api_id 和 api_hash) 以后， 即可使用 python3 -m pagermaid 尝试跑起来了。 docker exec -it pgmpyro nano config.yml docker exec -it pgmpyro python3 -m pagermaid 根据提示填写信息后，会提示你在 TG 客户端内输入 ,help 指令，根据提示输入后，如果能看到消息被编辑，Ctrl+C 结束掉即可。 进程守护：此步骤可以方便 pagermaid_pyro 的自动运行，您无需在 pagermaid-pyro 意外退出后重新登录主机进行操作。 docker exec -it pgmpyro systemctl daemon-reload docker exec -it pgmpyro systemctl start pagermaid_pyro.service docker exec -it pgmpyro systemctl enable pagermaid_pyro.service 若 PagerMaid-Pyro 在长期运行后遇到未知原因而无法正常运行的情况，需要手动重启。命令如下： docker exec -it pgmpyro systemctl restart pagermaid_pyro.service 请注意保护好您已登录的 pagermaid.session,此文件可以进行账号所有操作，请不要分享给他人使用。 ","date":"2022-11-01","objectID":"/pagermaid_pyro%E7%9A%84%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/:3:0","tags":["PagerMaid"],"title":"PagerMaid_Pyro的搭建教程","uri":"/pagermaid_pyro%E7%9A%84%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"},{"categories":["VPS"],"content":" IT 开发、运维、调试等工作经常需要 ssh 登录远程服务器。现在很多 ssh server 端设置了空闲超时自动断开。例如，人离开大于 30 分钟无操作，服务器判断空闲时间超过，于是断开连接，其实这很不利于开发调试工作的连续性。用户往往没有服务端配置权限。此外，客户端 xshell，putty 等的”保持活动状态“功能企图解决这个问题，但不一定能生效。例如，国内使用堡垒机登录的情况越来越普遍，访问一台内部服务器实际都经过了堡垒机的转发，堡垒机判断空闲超时，从而导致 ssh”保活“措施对内部服务器不起作用。 这里给出一个通用的解决办法。ssh 登录之后，在 bash shell 环境执行。 while true;do \\ for x in $(ls -1 /dev/pts |grep \"^[0-9]\");do \\ echo -en \"\\0x07\" \u003e /dev/pts/$x;\\ done;\\ sleep 1777;\\ done \u0026 查看 ssh 登录情况， $ who root tty1 2021-01-07 14:38 root pts/0 2022-01-07 17:55 (192.168.1.3) root pts/5 2022-01-07 07:28 (192.168.1.3) root pts/6 2022-01-07 17:57 (192.168.1.3) root pts/7 2022-01-07 18:26 (192.168.1.3) 其中 pts/0，pts/5，pts/6，pts/7 都是 ssh 登录终端设备。 说明: 若要 ssh session 保持活跃，只要在规定时间间隔内接收到的字节数不为零，则该 session 不会被服务端认为空闲。 向 pts 设备随意发送数据会影响 ssh 终端窗口的显示，例如在一个窗口用 wall 命令发消息而用户正在其他终端窗口 vim 编辑文档，在编辑区域会出现广播过来的消息，对用户工作造成一定干扰。为避免该问题，向 pts 设备发送 BEL（振铃），该字符没有任何回显，也就不会把显示搞乱。 设置发送间隔小于服务端设定的空闲间隔。例如，服务端设置半小时自动断开，那么我们设置 1777 秒是足够的。 如果同时用了 expect 自动登录，登录之后一般不要改变终端窗口大小，因为 expect 缺省忽略 SIGWINCH 信号，窗口 size 变化导致 VIM 编辑器排版混乱。 ","date":"2022-10-27","objectID":"/ssh%E4%BF%9D%E6%B4%BB%E6%8E%AA%E6%96%BD/:0:0","tags":["SSH"],"title":"SSH“保活”措施","uri":"/ssh%E4%BF%9D%E6%B4%BB%E6%8E%AA%E6%96%BD/"}]