[{"categories":["VPS"],"content":"安装 acme.sh 运行安装脚本（不要求 Root 环境） wget -O - https://get.acme.sh | sh 安装过程不会污染已有的系统任何功能和文件, 所有的修改都限制在安装目录中: ~/.acme.sh/ 然后重新载入一下 .bashrc source ~/.bashrc 开启acme.sh 的自动升级 acme.sh --upgrade --auto-upgrade ","date":"2022-11-05","objectID":"/acme.sh-apply-for-a-free-certificate.html/:1:0","tags":["证书"],"title":"Acme.sh申请免费证书","uri":"/acme.sh-apply-for-a-free-certificate.html/"},{"categories":["VPS"],"content":"证书申请 1.修改默认 CA 证书供应商acme.sh --set-default-ca --server letsencrypt 2.证书申请 2.1 80 端口未占用： acme.sh --issue -d www.yourdomain.com --standalone --keylength ec-256 --debug 2.2 80 端口占用，使用 DNS 申请： acme.sh --issue --dns dns_cf -d www.yourdomain.com --keylength ec-256 --debug # 不推荐使用全局 API 密钥（最小权限原则） # 使用新建一个cloudflare api 令牌: nano ~/.acme.sh/account.conf export CF_Token=\"sdfsdfsdfljlbjkljlkjsdfoiwje\" export CF_Account_ID=\"xxxxxxxxxxxxx\" export CF_Zone_ID=\"xxxxxxxxxxxxx\" //此项非必须 详见：acme.sh wiki dnsapi ECC 证书的主要优势在于它的 Keysize 更小，意味着同等大小下安全性的提升和加密解密速度的加快。如 ECC-256bit 的强度大约相当于 RSA-3072bit 。 ","date":"2022-11-05","objectID":"/acme.sh-apply-for-a-free-certificate.html/:2:0","tags":["证书"],"title":"Acme.sh申请免费证书","uri":"/acme.sh-apply-for-a-free-certificate.html/"},{"categories":["VPS"],"content":"证书安装 acme.sh --install-cert -d www.yourdomain.com \\ --fullchain-file ~/docker/nginx/ssl/yourdomain.crt \\ --key-file ~/docker/nginx/ssl/yourdomain.key --ecc 将~/docker/nginx/ssl/改成你想要的路径即可，建议证书以.crt 结尾，密钥以.key 结尾 ","date":"2022-11-05","objectID":"/acme.sh-apply-for-a-free-certificate.html/:3:0","tags":["证书"],"title":"Acme.sh申请免费证书","uri":"/acme.sh-apply-for-a-free-certificate.html/"},{"categories":["Telegram"],"content":"前提 注意⚠️,这是手动教程，要自动的可以关闭本教程了 宿主机已经安装 docker 未安装请使用官方脚本安装 curl -fsSL https://get.docker.com | bash -s docker 无需配置更多环境依赖,打开即用～ 基于此docker image仅264MB: 名称 版本 说明 altriabot/pagermaid_pyro 2.0 仅支持 AMD64 ","date":"2022-11-01","objectID":"/bulid_pagermaid_pyro.html/:1:0","tags":["PagerMaid"],"title":"PagerMaid_Pyro的搭建教程","uri":"/bulid_pagermaid_pyro.html/"},{"categories":["Telegram"],"content":"使用方法 docker run -itd --name pgmpyro --privileged=true --restart=always altriabot/pagermaid_pyro:2.0 ","date":"2022-11-01","objectID":"/bulid_pagermaid_pyro.html/:2:0","tags":["PagerMaid"],"title":"PagerMaid_Pyro的搭建教程","uri":"/bulid_pagermaid_pyro.html/"},{"categories":["Telegram"],"content":"配置 PagerMaid_Pyro 说明：配置 PagerMaid_Pyro 过程中使用的命令，都是在宿主机上执行。不需要进入容器(Container)内的 shell。 在宿主机，执行以下2条命令： ","date":"2022-11-01","objectID":"/bulid_pagermaid_pyro.html/:3:0","tags":["PagerMaid"],"title":"PagerMaid_Pyro的搭建教程","uri":"/bulid_pagermaid_pyro.html/"},{"categories":["Telegram"],"content":"1. 填写 api_id 和 api_hash docker exec -it pgmpyro nano config.yml 键盘️⬆️⬅️➡️⬇️ 控制光标 Ctrl+O，保存当前文件 提示File Name to Write:config.yml 按回车Enter确认 Ctrl+X，退出编辑文本 tips：如果直接Ctrl+X，会提示Save modified buffer?按 Y 确认后再回车即可 ","date":"2022-11-01","objectID":"/bulid_pagermaid_pyro.html/:3:1","tags":["PagerMaid"],"title":"PagerMaid_Pyro的搭建教程","uri":"/bulid_pagermaid_pyro.html/"},{"categories":["Telegram"],"content":"2. 登陆TG docker exec -it pgmpyro python3 -m pagermaid 根据提示填写信息后，会提示你在 TG 客户端内输入 ,help 指令，根据提示输入后，如果能看到消息被编辑， Ctrl+C 结束掉即可。 ","date":"2022-11-01","objectID":"/bulid_pagermaid_pyro.html/:3:2","tags":["PagerMaid"],"title":"PagerMaid_Pyro的搭建教程","uri":"/bulid_pagermaid_pyro.html/"},{"categories":["Telegram"],"content":"3. 进程守护 一定要依次输入这三条代码 此步骤可以方便 pagermaid_pyro 的自动运行，而无需在 pagermaid_pyro 意外退出后重新登录主机进行操作。 docker exec -it pgmpyro systemctl daemon-reload docker exec -it pgmpyro systemctl start pagermaid_pyro.service docker exec -it pgmpyro systemctl enable pagermaid_pyro.service ","date":"2022-11-01","objectID":"/bulid_pagermaid_pyro.html/:3:3","tags":["PagerMaid"],"title":"PagerMaid_Pyro的搭建教程","uri":"/bulid_pagermaid_pyro.html/"},{"categories":["Telegram"],"content":"4. 其它 ✋Stop不用继续执行下面这个命令了 当且仅当你的PagerMaid_Pyro长期运行后，遇到未知原因而无法正常启动的情况，需要手动重启。命令如下： docker exec -it pgmpyro systemctl restart pagermaid_pyro.service 请注意保护好您已登录的 pagermaid.session,此文件可以进行账号所有操作，请不要分享给他人使用。 ","date":"2022-11-01","objectID":"/bulid_pagermaid_pyro.html/:3:4","tags":["PagerMaid"],"title":"PagerMaid_Pyro的搭建教程","uri":"/bulid_pagermaid_pyro.html/"},{"categories":["Telegram"],"content":"扩展 官方教程 PagerMaid-Pyro 新的项目 ixiaocai的PGM教程 基于Docker AMD/ARM适用 owo PGM 教程 基于宿主机 ","date":"2022-11-01","objectID":"/bulid_pagermaid_pyro.html/:4:0","tags":["PagerMaid"],"title":"PagerMaid_Pyro的搭建教程","uri":"/bulid_pagermaid_pyro.html/"},{"categories":["VPS"],"content":" IT 开发、运维、调试等工作经常需要 ssh 登录远程服务器。现在很多 ssh server 端设置了空闲超时自动断开。例如，人离开大于 30 分钟无操作，服务器判断空闲时间超过，于是断开连接，其实这很不利于开发调试工作的连续性。用户往往没有服务端配置权限。此外，客户端 xshell，putty 等的”保持活动状态“功能企图解决这个问题，但不一定能生效。例如，国内使用堡垒机登录的情况越来越普遍，访问一台内部服务器实际都经过了堡垒机的转发，堡垒机判断空闲超时，从而导致 ssh”保活“措施对内部服务器不起作用。 这里给出一个通用的解决办法。ssh 登录之后，在 bash shell 环境执行。 while true;do \\ for x in $(ls -1 /dev/pts |grep \"^[0-9]\");do \\ echo -en \"\\0x07\" \u003e /dev/pts/$x;\\ done;\\ sleep 1777;\\ done \u0026 查看 ssh 登录情况， $ who root tty1 2021-01-07 14:38 root pts/0 2022-01-07 17:55 (192.168.1.3) root pts/2 2022-01-07 07:28 (192.168.1.3) 其中 pts/0，pts/5，pts/6，pts/7 都是 ssh 登录终端设备。 说明: 若要 ssh session 保持活跃，只要在规定时间间隔内接收到的字节数不为零，则该 session 不会被服务端认为空闲。 向 pts 设备随意发送数据会影响 ssh 终端窗口的显示，例如在一个窗口用 wall 命令发消息而用户正在其他终端窗口 vim 编辑文档，在编辑区域会出现广播过来的消息，对用户工作造成一定干扰。为避免该问题，向 pts 设备发送 BEL（振铃），该字符没有任何回显，也就不会把显示搞乱。 设置发送间隔小于服务端设定的空闲间隔。例如，服务端设置半小时自动断开，那么我们设置 1777 秒是足够的。 如果同时用了 expect 自动登录，登录之后一般不要改变终端窗口大小，因为 expect 缺省忽略 SIGWINCH 信号，窗口 size 变化导致 VIM 编辑器排版混乱。 ","date":"2022-10-27","objectID":"/ssh-keep-alive.html/:0:0","tags":["SSH"],"title":"SSH“保活”措施","uri":"/ssh-keep-alive.html/"}]