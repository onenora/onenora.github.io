[{"categories":["Docker"],"content":"1.安装Docker 环境 curl -fsSL https://get.docker.com | bash -s docker ","date":"2022-12-12","objectID":"/trojan-go.html/:1:0","tags":["trojan-go"],"title":"Docker安装trojan-go","uri":"/trojan-go.html/"},{"categories":["Docker"],"content":"2.在当前目录创建trojan-go文件夹 mkdir -p trojan-go ","date":"2022-12-12","objectID":"/trojan-go.html/:2:0","tags":["trojan-go"],"title":"Docker安装trojan-go","uri":"/trojan-go.html/"},{"categories":["Docker"],"content":"3.创建并映射trojan-go的配置文件config.json cat \u003e trojan-go/config.json \u003c\u003cEOF { \"run_type\": \"server\", \"local_addr\": \"0.0.0.0\", \"local_port\": 443, \"remote_addr\": \"1.1.1.1\", \"remote_port\": 80, \"password\": [ \"your_awesome_password\" ], \"ssl\": { \"cert\": \"server.crt\", \"key\": \"server.key\", \"sni\": \"your-domain-name.com\", \"fallback_port\": 443 } } EOF ","date":"2022-12-12","objectID":"/trojan-go.html/:3:0","tags":["trojan-go"],"title":"Docker安装trojan-go","uri":"/trojan-go.html/"},{"categories":["Docker"],"content":"4 运行trojan-go docker run -d --network host --name trojan-go --restart=always -v /trojan-go:/etc/trojan-go teddysun/trojan-go ","date":"2022-12-12","objectID":"/trojan-go.html/:4:0","tags":["trojan-go"],"title":"Docker安装trojan-go","uri":"/trojan-go.html/"},{"categories":["VPS"],"content":"服务器优化之一：开启 BBR ","date":"2022-12-12","objectID":"/open_bbr.html/:0:0","tags":["BBR"],"title":"开启bbr","uri":"/open_bbr.html/"},{"categories":["VPS"],"content":"1. 传说中的 BBR 我相信，你在搜索各种科学上网技术的时候，肯定不止一次的听过 bbr 这个东西，在各种博客添油加醋之下，让人觉得它神乎其神。更有 bbrplus, bbr2, 魔改 bbr 等一大堆衍生品。仿佛神油一般，用了就能野鸡线路变专线。 那么，这东西究竟是什么？它有没有用？又该用哪一个版本呢？ ","date":"2022-12-12","objectID":"/open_bbr.html/:1:0","tags":["BBR"],"title":"开启bbr","uri":"/open_bbr.html/"},{"categories":["VPS"],"content":"2. 实际的 BBR BBR = Bottleneck Bandwidth and Round-trip propagation time，是一种 TCP 的拥塞控制算法。简单粗暴的理解就是数据流量的交通管理 ：当公路不再塞车的时候，每辆车自然就能保持较快的车速了。 那么它有没有用呢？一般而言，有 BBR 和 没有 BBR 会有可以感知的差别（速度、稳定性、延迟方面都会有一些改善），所以 【非常建议开启 BBR】。 但开启之后，BBR 在 4.x 和 5.x 之间的差异往往比较微妙、见仁见智，造成体验差别的决定性因素仍然是线路质量。所以 【不必纠结版本、不必盲目追新、跟随你的发行版更新内核即可】 ","date":"2022-12-12","objectID":"/open_bbr.html/:2:0","tags":["BBR"],"title":"开启bbr","uri":"/open_bbr.html/"},{"categories":["VPS"],"content":"3. bbrplus, bbr2, 魔改 bbr 和其他各种听起来就酷炫的版本是不是更好？ 一句话：不是！不要用这些！这些都为了吸引眼球乱起的名字！ BBR 的更新和发布，都是跟随 Linux 的内核（Kernel）进行的。换言之，只要你用的是比较新的内核，就自然会使用到新版 BBR。 而这些名字看起来很酷炫的东西，说白了就是仍未正式发布的、尚在测试阶段的内核及其对应的 BBR 版本。这些脚本也仅仅就是通过下载预览版的内核（甚至第三方魔改内核）来率先开启而已。 内核的稳定是一台服务器稳定运行的基石。【BBR 测试版带来的细微性能差异绝对不值得更换不稳定的内核。】 请选择你所在的 Linux 发行版所支持的最新内核，这样可以最大限度的保持服务器的长期稳定和兼容。 注意 所谓魔改 bbr 的【领先】是有非常强的时效性的。比如很多 bbrplus 脚本，因为几年来都没有更新，到现在还会把你的内核换成 4.19，要知道现在稳定如 Debian 已经是 5.9 的时代了，那么这个脚本放在 2018 年 1 月也许领先了一点，到 2018 年 10 月 4.19 正发布时就已经失去了意义，放在现在甚至可以说是完完全全的【降级】和【劣化】 ","date":"2022-12-12","objectID":"/open_bbr.html/:3:0","tags":["BBR"],"title":"开启bbr","uri":"/open_bbr.html/"},{"categories":["VPS"],"content":"4. fq, fq_codel, fq_pie, cake 和其他算法哪个好？ 一句话：看不懂的话，请保持 fq，足够、且不会劣化你的线路 ","date":"2022-12-12","objectID":"/open_bbr.html/:4:0","tags":["BBR"],"title":"开启bbr","uri":"/open_bbr.html/"},{"categories":["VPS"],"content":"5. 锐速、Finalspeed、LotServer 和其他“加速工具” 一句话：不要用这些！把他们丢进历史的垃圾桶吧！ 它能解决的也只有丢包率的问题。不太准确的比喻，就是本来你用一辆车送你的货，有时候车半路就坏了（丢包），用了这些以后，你直接派出 3 份一样的货，让三辆车同时送，只要有一辆没坏就能送到。马路上都是你的车，自然就能把别人挤下去。但可想而知，你挤别人的时候，别人也会来挤你，而整个机房的出口道路一共就那么宽，最终势必就变成集体大堵车了。 说明 它们的原理不是算法优化、不是提速、大多数是简单粗暴的多倍发包。对于【丢包率非常高】的差线路可能有一点作用，但【对丢包率低的好线路没有任何优化作用，反而会成倍的消耗你的流量】，进而造成服务器和你的邻居不必要的压力。 如果你的线路真的丢包率奇高，真正靠谱的解决方案是【换线路】。 ","date":"2022-12-12","objectID":"/open_bbr.html/:5:0","tags":["BBR"],"title":"开启bbr","uri":"/open_bbr.html/"},{"categories":["VPS"],"content":"6. 啰嗦了这么多 就是因为围绕 BBR 忽悠小白的错误概念和坑人脚本实在是太多了。我希望你们现在对 BBR 有了相对清晰的理解。接下来，我们就动手安装最新的 Debian 内核并开启 BBR 吧！（真的很简单） ","date":"2022-12-12","objectID":"/open_bbr.html/:6:0","tags":["BBR"],"title":"开启bbr","uri":"/open_bbr.html/"},{"categories":["VPS"],"content":"6.1 给 Debian 10 添加官方 backports 源，获取更新的软件库 sudo nano /etc/apt/sources.list 说明 本文以 Debian 10 为例，所以使用 /etc/apt/sources.list 仍无问题，但如果你并不是根据本文从头开始，或者使用了其他 Linux 发行版，那么建议你建立 /etc/apt/sources.list.d/ 文件夹，并在这个文件夹内建立自己的配置文件，形如 /etc/apt/sources.list.d/vpsadmin.list ，以此保证兼容性，也可避免默认文件在不可预见的情况下被覆盖而导致配置丢失。 ","date":"2022-12-12","objectID":"/open_bbr.html/:6:1","tags":["BBR"],"title":"开启bbr","uri":"/open_bbr.html/"},{"categories":["VPS"],"content":"6.2 然后把下面这一条加在最后，并保存退出。 deb http://deb.debian.org/debian buster-backports main ","date":"2022-12-12","objectID":"/open_bbr.html/:6:2","tags":["BBR"],"title":"开启bbr","uri":"/open_bbr.html/"},{"categories":["VPS"],"content":"6.3 刷新软件库并查询 Debian 官方的最新版内核并安装。请务必安装你的 VPS 对应的版本（本文以比较常见的【amd64】为例）。 sudo apt update \u0026\u0026 sudo apt -t buster-backports install linux-image-amd64 注意 如果你的 VPS 支持，可以尝试【云服务器专用内核】linux-image-cloud-amd64，优点就是精简、资源占用低，缺点嘛是有同学反馈不支持的系统强行安装会导致无法开机（Kernel 无法识别）。 为了避免无法识别的悲剧，请确保： 尝试前做一个系统快照，或者 你有 vnc 可以救场（并且你知道怎么用） ","date":"2022-12-12","objectID":"/open_bbr.html/:6:3","tags":["BBR"],"title":"开启bbr","uri":"/open_bbr.html/"},{"categories":["VPS"],"content":"6.4. 修改 kernel 参数配置文件 sysctl.conf 并指定开启 BBR sudo nano /etc/sysctl.conf 说明 本文以 Debian 10 为例，所以使用 /etc/sysctl.conf 仍无问题，但如果你并不是跟着本文从头开始，或者使用了其他 Linux 发行版，那么建议你建立 /etc/sysctl.d/ 文件夹，并在这个文件夹内建立自己的配置文件，形如 /etc/sysctl.d/vpsadmin.conf，以此保证兼容性，因为部分发行版在 systemd 207 版本之后便不再从 /etc/sysctl.conf 读取参数。使用自定义配置文件也可避免默认文件在不可预见的情况下被覆盖而导致配置丢失。 ","date":"2022-12-12","objectID":"/open_bbr.html/:6:4","tags":["BBR"],"title":"开启bbr","uri":"/open_bbr.html/"},{"categories":["VPS"],"content":"6.5 把下面的内容添加进去 net.core.default\\_qdisc=fq net.ipv4.tcp\\_congestion\\_control=bbr ","date":"2022-12-12","objectID":"/open_bbr.html/:6:5","tags":["BBR"],"title":"开启bbr","uri":"/open_bbr.html/"},{"categories":["VPS"],"content":"6.6 重启 VPS、使内核更新和 BBR 设置都生效 sudo reboot ","date":"2022-12-12","objectID":"/open_bbr.html/:6:6","tags":["BBR"],"title":"开启bbr","uri":"/open_bbr.html/"},{"categories":["VPS"],"content":"8. 确认 BBR 开启 如果你想确认 BBR 是否正确开启，可以使用下面的命令： lsmod | grep bbr 此时应该返回这样的结果： tcp\\_bbr 如果你想确认 fq 算法是否正确开启，可以使用下面的命令： lsmod | grep fq 此时应该返回这样的结果： sch\\_fq ","date":"2022-12-12","objectID":"/open_bbr.html/:7:0","tags":["BBR"],"title":"开启bbr","uri":"/open_bbr.html/"},{"categories":["VPS"],"content":"安装 acme.sh 运行安装脚本（不要求 Root 环境） wget -O - https://get.acme.sh | sh 安装过程不会污染已有的系统任何功能和文件, 所有的修改都限制在安装目录中: ~/.acme.sh/ 然后重新载入一下 .bashrc source ~/.bashrc 开启acme.sh 的自动升级 acme.sh --upgrade --auto-upgrade ","date":"2022-11-05","objectID":"/acme.sh-apply-for-a-free-certificate.html/:1:0","tags":["证书"],"title":"Acme.sh申请免费证书","uri":"/acme.sh-apply-for-a-free-certificate.html/"},{"categories":["VPS"],"content":"证书申请 1.修改默认 CA 证书供应商acme.sh --set-default-ca --server letsencrypt 2.证书申请 2.1 80 端口未占用： acme.sh --issue -d www.yourdomain.com --standalone --keylength ec-256 --debug 2.2 80 端口占用，使用 DNS 申请： acme.sh --issue --dns dns_cf -d www.yourdomain.com --keylength ec-256 --debug --debug是可选参数,输出的信息更详细，用来排除错误。 如下，申请成功： 配置文件位置 ~/.acme.sh/account.conf可以用Vim或者nano 打开编辑 # 不推荐使用全局 API 密钥（最小权限原则） # 使用新建一个cloudflare api 令牌: nano ~/.acme.sh/account.conf export CF_Token=\"sdfsdfsdfljlbjkljlkjsdfoiwje\" export CF_Account_ID=\"xxxxxxxxxxxxx\" export CF_Zone_ID=\"xxxxxxxxxxxxx\" //此项非必须 详见：acme.sh wiki dnsapi ECC 证书的主要优势在于它的 Keysize 更小，意味着同等大小下安全性的提升和加密解密速度的加快。如 ECC-256bit 的强度大约相当于 RSA-3072bit 。 ","date":"2022-11-05","objectID":"/acme.sh-apply-for-a-free-certificate.html/:2:0","tags":["证书"],"title":"Acme.sh申请免费证书","uri":"/acme.sh-apply-for-a-free-certificate.html/"},{"categories":["VPS"],"content":"证书安装 acme.sh --install-cert -d www.yourdomain.com \\ --fullchain-file ~/docker/nginx/ssl/yourdomain.crt \\ --key-file ~/docker/nginx/ssl/yourdomain.key --ecc 将~/docker/nginx/ssl/改成你想要安装到的路径即可，建议证书以.crt 结尾，密钥以.key 结尾。 ","date":"2022-11-05","objectID":"/acme.sh-apply-for-a-free-certificate.html/:3:0","tags":["证书"],"title":"Acme.sh申请免费证书","uri":"/acme.sh-apply-for-a-free-certificate.html/"},{"categories":["VPS"],"content":"为电报设置通知 一旦您同时拥有TG Bot API令牌和您希望机器人设置通知的聊天ID， 请在~/.acme.sh/account.conf 设置以下两个变量供通知钩子脚本使用： export TELEGRAM_BOT_APITOKEN=\"...\" # Token returned by @BotFather during bot creation above. export TELEGRAM_BOT_CHATID=\"...\" # Chat ID fetched above. 然后设置通知钩子：acme.sh --set-notify --notify-hook telegram 如下电报机器人通知设置成功： 默认acme.sh每天自动检测证书是否过期，过期会自动续约，并安装到上一次安装证书的位置。 没过期，Renew Skipped。过期，续约通知 Success!!! 详见：acme.sh wiki notify ","date":"2022-11-05","objectID":"/acme.sh-apply-for-a-free-certificate.html/:4:0","tags":["证书"],"title":"Acme.sh申请免费证书","uri":"/acme.sh-apply-for-a-free-certificate.html/"},{"categories":["VPS"],"content":"其它 想到再写吧！！ acme.sh --set-notify --notify-level 3 --notify-mode 1TG Bot通知频率设置设置为高，每天通知。默认续约成功才通知，现在是每天检测证书是否过期也会发通知,没过期会跳过续约。 ","date":"2022-11-05","objectID":"/acme.sh-apply-for-a-free-certificate.html/:5:0","tags":["证书"],"title":"Acme.sh申请免费证书","uri":"/acme.sh-apply-for-a-free-certificate.html/"},{"categories":["Telegram"],"content":"前提 注意⚠️,这是手动教程，要自动的可以关闭本教程了 宿主机已经安装 docker 未安装请使用官方脚本安装 curl -fsSL https://get.docker.com | bash -s docker 无需配置更多环境依赖,打开即用～ 基于此docker image仅264MB: 名称 版本 说明 altriabot/pagermaid_pyro 2.0 仅支持 AMD64 ","date":"2022-11-01","objectID":"/bulid_pagermaid_pyro.html/:1:0","tags":["PagerMaid"],"title":"PagerMaid_Pyro的搭建教程","uri":"/bulid_pagermaid_pyro.html/"},{"categories":["Telegram"],"content":"使用方法 docker run -itd --name pgmpyro --privileged=true --restart=always altriabot/pagermaid_pyro:2.0 ","date":"2022-11-01","objectID":"/bulid_pagermaid_pyro.html/:2:0","tags":["PagerMaid"],"title":"PagerMaid_Pyro的搭建教程","uri":"/bulid_pagermaid_pyro.html/"},{"categories":["Telegram"],"content":"配置 PagerMaid_Pyro 说明：配置 PagerMaid_Pyro 过程中使用的命令，都是在宿主机上执行。不需要进入容器(Container)内的 shell。 在宿主机，执行以下2条命令： ","date":"2022-11-01","objectID":"/bulid_pagermaid_pyro.html/:3:0","tags":["PagerMaid"],"title":"PagerMaid_Pyro的搭建教程","uri":"/bulid_pagermaid_pyro.html/"},{"categories":["Telegram"],"content":"1. 填写 api_id 和 api_hash docker exec -it pgmpyro nano config.yml 键盘️⬆️⬅️➡️⬇️ 控制光标 Ctrl+O，保存当前文件 提示File Name to Write:config.yml 按回车Enter确认 Ctrl+X，退出编辑文本 tips：如果直接Ctrl+X，会提示Save modified buffer?按 Y 确认后再回车即可 ","date":"2022-11-01","objectID":"/bulid_pagermaid_pyro.html/:3:1","tags":["PagerMaid"],"title":"PagerMaid_Pyro的搭建教程","uri":"/bulid_pagermaid_pyro.html/"},{"categories":["Telegram"],"content":"2. 登陆TG docker exec -it pgmpyro python3 -m pagermaid 根据提示填写信息后，会提示你在 TG 客户端内输入 ,help 指令，根据提示输入后，如果能看到消息被编辑， Ctrl+C 结束掉即可。 ","date":"2022-11-01","objectID":"/bulid_pagermaid_pyro.html/:3:2","tags":["PagerMaid"],"title":"PagerMaid_Pyro的搭建教程","uri":"/bulid_pagermaid_pyro.html/"},{"categories":["Telegram"],"content":"3. 进程守护 一定要依次输入这三条代码 此步骤可以方便 pagermaid_pyro 的自动运行，而无需在 pagermaid_pyro 意外退出后重新登录主机进行操作。 docker exec -it pgmpyro systemctl daemon-reload docker exec -it pgmpyro systemctl start pagermaid_pyro.service docker exec -it pgmpyro systemctl enable pagermaid_pyro.service ","date":"2022-11-01","objectID":"/bulid_pagermaid_pyro.html/:3:3","tags":["PagerMaid"],"title":"PagerMaid_Pyro的搭建教程","uri":"/bulid_pagermaid_pyro.html/"},{"categories":["Telegram"],"content":"4. 其它 ✋Stop不用继续执行下面这个命令了 当且仅当你的PagerMaid_Pyro长期运行后，遇到未知原因而无法正常启动的情况，需要手动重启。命令如下： docker exec -it pgmpyro systemctl restart pagermaid_pyro.service 请注意保护好您已登录的 pagermaid.session,此文件可以进行账号所有操作，请不要分享给他人使用。 ","date":"2022-11-01","objectID":"/bulid_pagermaid_pyro.html/:3:4","tags":["PagerMaid"],"title":"PagerMaid_Pyro的搭建教程","uri":"/bulid_pagermaid_pyro.html/"},{"categories":["Telegram"],"content":"扩展 官方教程 PagerMaid-Pyro 新的项目 ixiaocai的PGM教程 基于Docker AMD/ARM适用 owo PGM 教程 基于宿主机 ","date":"2022-11-01","objectID":"/bulid_pagermaid_pyro.html/:4:0","tags":["PagerMaid"],"title":"PagerMaid_Pyro的搭建教程","uri":"/bulid_pagermaid_pyro.html/"},{"categories":["VPS"],"content":" IT 开发、运维、调试等工作经常需要 ssh 登录远程服务器。现在很多 ssh server 端设置了空闲超时自动断开。例如，人离开大于 30 分钟无操作，服务器判断空闲时间超过，于是断开连接，其实这很不利于开发调试工作的连续性。用户往往没有服务端配置权限。此外，客户端 xshell，putty 等的”保持活动状态“功能企图解决这个问题，但不一定能生效。例如，国内使用堡垒机登录的情况越来越普遍，访问一台内部服务器实际都经过了堡垒机的转发，堡垒机判断空闲超时，从而导致 ssh”保活“措施对内部服务器不起作用。 这里给出一个通用的解决办法。ssh 登录之后，在 bash shell 环境执行。 while true;do \\ for x in $(ls -1 /dev/pts |grep \"^[0-9]\");do \\ echo -en \"\\0x07\" \u003e /dev/pts/$x;\\ done;\\ sleep 1777;\\ done \u0026 查看 ssh 登录情况， $ who root tty1 2021-01-07 14:38 root pts/0 2022-01-07 17:55 (192.168.1.3) root pts/2 2022-01-07 07:28 (192.168.1.3) 其中 pts/0，pts/5，pts/6，pts/7 都是 ssh 登录终端设备。 说明: 若要 ssh session 保持活跃，只要在规定时间间隔内接收到的字节数不为零，则该 session 不会被服务端认为空闲。 向 pts 设备随意发送数据会影响 ssh 终端窗口的显示，例如在一个窗口用 wall 命令发消息而用户正在其他终端窗口 vim 编辑文档，在编辑区域会出现广播过来的消息，对用户工作造成一定干扰。为避免该问题，向 pts 设备发送 BEL（振铃），该字符没有任何回显，也就不会把显示搞乱。 设置发送间隔小于服务端设定的空闲间隔。例如，服务端设置半小时自动断开，那么我们设置 1777 秒是足够的。 如果同时用了 expect 自动登录，登录之后一般不要改变终端窗口大小，因为 expect 缺省忽略 SIGWINCH 信号，窗口 size 变化导致 VIM 编辑器排版混乱。 ","date":"2022-10-27","objectID":"/ssh-keep-alive.html/:0:0","tags":["SSH"],"title":"SSH“保活”措施","uri":"/ssh-keep-alive.html/"}]